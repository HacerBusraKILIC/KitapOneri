/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kitaponeri;

import com.mysql.jdbc.Connection;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import static kitaponeri.uyelikDevamPage.DB_URL;

/**
 *
 * @author dell
 */
public class anaSayfa extends javax.swing.JFrame {

    // JDBC driver name and database URL
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://localhost/kitapOneriKullanici";

    //  Database credentials
    static final String USER = "root";
    static final String PASS = "1038";
    private static Connection con;
    private static Statement st;
    private static ResultSet rs;

    private static String INSERT_QUERY_BOOKRATE = "INSERT INTO `bx_book_ratings` "
            + "(`user_id`, `isbn`, `book_rating`) VALUES "
            + "(?,?,?)";

    long goruntulenenSayfa = 1, toplamSayfa = 0, sayac = 0, sayfaItem = 30;
    int addBookCount = 0;  // Add book from users for 10 books

    DefaultListModel dm = new DefaultListModel();

    public anaSayfa() throws IOException {
        initComponents();

        veriCek(1);
        lbgoruntulenenSayfa.setText("1");
        lbsayfaOranı.setText("1/" + toplamSayfa);

    }

    private void veriCek(long goruntulenenSayfa) throws MalformedURLException, IOException {
        bookImageList.removeAll();
        countBook();
        try {
            goruntulenenSayfa--;
            String ıtemLimit = "SELECT *FROM bx_books LIMIT " + (goruntulenenSayfa * sayfaItem) + "," + sayfaItem;
            con = con = (Connection) DriverManager.getConnection(DB_URL, USER, PASS);
            st = con.createStatement();
            rs = st.executeQuery(ıtemLimit);

            dm.clear();

            while (rs.next()) {
                //System.out.println("2> "+rs.getString(2)+ "3> "+rs.getString(3)+ "4> "+rs.getString(4)+ "5> "+rs.getString(5));
                //String isbn = rs.getString(1);
                String bookTitle = rs.getString(2);
                String bookAuthor = rs.getString(3);
                String yearOfPublication = rs.getString(4);
                String imgUrlS = rs.getString(6);
                String imgUrlM = rs.getString(7); //System.out.println(rs.getString(7));
                URL url = new URL(imgUrlS);
                BufferedImage image = ImageIO.read(url);
                if (image.getHeight() < 50 && image.getWidth() < 50) {
                    dm.addElement(new ImgInformation(new ImageIcon("warning.png"), bookTitle + "     " + bookAuthor + "     " + yearOfPublication));
                } else {
                    dm.addElement(new ImgInformation(new ImageIcon(image), bookTitle + "     " + bookAuthor + "     " + yearOfPublication));
                }

                bookImageList.setCellRenderer(new ImgRenderer());
                bookImageList.setModel(dm);
            }

            /*rs.close();
             st.close();
             cn.close();*/
        } catch (SQLException ex) {
            Logger.getLogger(uyelikDevamPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void countBook() {
        try {
            String query = "Select count(*) from bx_books";
            con = con = (Connection) DriverManager.getConnection(DB_URL, USER, PASS);
            st = con.createStatement();
            rs = st.executeQuery(query);
            while (rs.next()) {
                sayac = rs.getLong(1);
            }
            /*rs.close();
             st.close();
             con.close();*/
        } catch (SQLException ex) {
            Logger.getLogger(uyelikDevamPage.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (sayac % sayfaItem == 0) {
            toplamSayfa = sayac / sayfaItem;
        } else {
            toplamSayfa = sayac / sayfaItem + 1;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        bookImageList = new javax.swing.JList();
        enSonEklenen = new javax.swing.JButton();
        oncekiSayfa = new javax.swing.JButton();
        sonrakiSayfa = new javax.swing.JButton();
        lbgoruntulenenSayfa = new javax.swing.JLabel();
        lbsayfaOranı = new javax.swing.JLabel();
        enIyi = new javax.swing.JButton();
        enPopuler = new javax.swing.JButton();
        sizinIcin = new javax.swing.JButton();
        anaSayfa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bookImageList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookImageListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookImageList);

        enSonEklenen.setText("En Son Eklenenler");
        enSonEklenen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enSonEklenenActionPerformed(evt);
            }
        });

        oncekiSayfa.setText("<");
        oncekiSayfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oncekiSayfaActionPerformed(evt);
            }
        });

        sonrakiSayfa.setText(">");
        sonrakiSayfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sonrakiSayfaActionPerformed(evt);
            }
        });

        lbgoruntulenenSayfa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbgoruntulenenSayfa.setText("jLabel2");

        lbsayfaOranı.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbsayfaOranı.setText("jLabel2");

        enIyi.setText("En Iyi");
        enIyi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enIyiActionPerformed(evt);
            }
        });

        enPopuler.setText("En Populer");
        enPopuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enPopulerActionPerformed(evt);
            }
        });

        sizinIcin.setText("Sizin Icin");
        sizinIcin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizinIcinActionPerformed(evt);
            }
        });

        anaSayfa.setText("Ana Sayfa");
        anaSayfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anaSayfaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(oncekiSayfa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbgoruntulenenSayfa)
                        .addGap(18, 18, 18)
                        .addComponent(sonrakiSayfa)
                        .addGap(18, 18, 18)
                        .addComponent(lbsayfaOranı)
                        .addGap(33, 33, 33)
                        .addComponent(anaSayfa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(sizinIcin)
                        .addGap(27, 27, 27)
                        .addComponent(enSonEklenen)
                        .addGap(35, 35, 35)
                        .addComponent(enIyi)
                        .addGap(37, 37, 37)
                        .addComponent(enPopuler)
                        .addGap(8, 8, 8))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(oncekiSayfa)
                        .addComponent(sonrakiSayfa)
                        .addComponent(lbgoruntulenenSayfa)
                        .addComponent(lbsayfaOranı))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(enSonEklenen)
                        .addComponent(enIyi)
                        .addComponent(enPopuler)
                        .addComponent(sizinIcin)
                        .addComponent(anaSayfa)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void oncekiSayfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oncekiSayfaActionPerformed
        if (goruntulenenSayfa > 1) {
            goruntulenenSayfa--;
            try {
                veriCek(goruntulenenSayfa);
            } catch (IOException ex) {
                Logger.getLogger(uyelikDevamPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            lbgoruntulenenSayfa.setText("" + goruntulenenSayfa);
            lbsayfaOranı.setText(goruntulenenSayfa + "/" + toplamSayfa);
        }
    }//GEN-LAST:event_oncekiSayfaActionPerformed

    private void sonrakiSayfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sonrakiSayfaActionPerformed
        if (toplamSayfa > goruntulenenSayfa) {
            goruntulenenSayfa++;
            try {
                veriCek(goruntulenenSayfa);
            } catch (IOException ex) {
                Logger.getLogger(uyelikDevamPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            lbgoruntulenenSayfa.setText("" + goruntulenenSayfa);
            lbsayfaOranı.setText(goruntulenenSayfa + "/" + toplamSayfa);
        }
    }//GEN-LAST:event_sonrakiSayfaActionPerformed

    private void bookImageListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookImageListMouseClicked
        // user_id alınıp book rate e veri eklenecek bunun icin split ile ayrıistirildi
        String[] selectItem = ((ImgInformation) bookImageList.getSelectedValue()).getBookTitle().split("     ");
        pdfViewer pdf = new pdfViewer();
        pdf.openpdf("React.js Giriş.pdf");
        pdf.setVisible(true);

    }//GEN-LAST:event_bookImageListMouseClicked

    private void enSonEklenenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enSonEklenenActionPerformed
        bookImageList.removeAll();
        try {
            String enSonEklenen = "SELECT * FROM bx_books  LIMIT " + (sayac - 5) + "," + sayac;
            st = con.createStatement();
            rs = st.executeQuery(enSonEklenen);

            dm.clear();

            while (rs.next()) {
                String bookTitle = rs.getString(2);
                String bookAuthor = rs.getString(3);
                String yearOfPublication = rs.getString(4);
                String imgUrlS = rs.getString(6);
                String imgUrlM = rs.getString(7); //System.out.println(rs.getString(7));
                URL url = new URL(imgUrlS);
                BufferedImage image = ImageIO.read(url);
                if (image.getHeight() < 50 && image.getWidth() < 50) {
                    dm.addElement(new ImgInformation(new ImageIcon("warning.png"), bookTitle + "     " + bookAuthor + "     " + yearOfPublication));
                } else {
                    dm.addElement(new ImgInformation(new ImageIcon(image), bookTitle + "     " + bookAuthor + "     " + yearOfPublication));
                }

                bookImageList.setCellRenderer(new ImgRenderer());
                bookImageList.setModel(dm);
            }
        } catch (SQLException ex) {
            Logger.getLogger(uyelikDevamPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(anaSayfa.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(anaSayfa.class.getName()).log(Level.SEVERE, null, ex);
        }

        sayac = 5;
        sayfaItem = 5;
        if (sayac % sayfaItem == 0) {
            toplamSayfa = sayac / sayfaItem;
        } else {
            toplamSayfa = sayac / sayfaItem + 1;
        }
        lbgoruntulenenSayfa.setText("1");
        lbsayfaOranı.setText("1/" + toplamSayfa);
        countBook();
    }//GEN-LAST:event_enSonEklenenActionPerformed

    private void enIyiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enIyiActionPerformed
        bookImageList.removeAll();
        try {
            //String enIyi = "SELECT isbn, AVG(book_rating) From bx_book_ratings GROUP BY book_rating ORDER BY book_rating DESC";
            String enIyi = "SELECT * FROM bx_books WHERE isbn IN(SELECT bx_book_ratings.isbn FROM bx_book_ratings WHERE bx_book_ratings.book_rating>(SELECT AVG (bx_book_ratings.book_rating) FROM bx_book_ratings) ) LIMIT 25";
            st = con.createStatement();
            rs = st.executeQuery(enIyi);

            dm.clear();

            while (rs.next()) {
                String bookTitle = rs.getString(2);
                String bookAuthor = rs.getString(3);
                String yearOfPublication = rs.getString(4);
                String imgUrlS = rs.getString(6);
                String imgUrlM = rs.getString(7);
                URL url = new URL(imgUrlS);
                BufferedImage image = ImageIO.read(url);
                if (image.getHeight() < 50 && image.getWidth() < 50) {
                    dm.addElement(new ImgInformation(new ImageIcon("warning.png"), bookTitle + "     " + bookAuthor + "     " + yearOfPublication));
                } else {
                    dm.addElement(new ImgInformation(new ImageIcon(image), bookTitle + "     " + bookAuthor + "     " + yearOfPublication));
                }

                bookImageList.setCellRenderer(new ImgRenderer());
                bookImageList.setModel(dm);
            }
        } catch (SQLException ex) {
            Logger.getLogger(uyelikDevamPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(anaSayfa.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(anaSayfa.class.getName()).log(Level.SEVERE, null, ex);
        }

        sayac = 10;
        sayfaItem = 10;
        if (sayac % sayfaItem == 0) {
            toplamSayfa = sayac / sayfaItem;
        } else {
            toplamSayfa = sayac / sayfaItem + 1;
        }
        lbgoruntulenenSayfa.setText("1");
        lbsayfaOranı.setText("1/" + toplamSayfa);
        countBook();
    }//GEN-LAST:event_enIyiActionPerformed

    private void enPopulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enPopulerActionPerformed
        bookImageList.removeAll();
        try {
            String enPoulerBul = "SELECT * FROM bx_books WHERE isbn IN(SELECT isbn FROM bx_book_ratings GROUP BY user_id HAVING COUNT(isbn)>1 ORDER BY COUNT(isbn) DESC) LIMIT 10";
            st = con.createStatement();
            rs = st.executeQuery(enPoulerBul);

            dm.clear();

            while (rs.next()) {
                String bookTitle = rs.getString(2);
                String bookAuthor = rs.getString(3);
                String yearOfPublication = rs.getString(4);
                String imgUrlS = rs.getString(6);
                String imgUrlM = rs.getString(7);
                System.out.println("2> " + rs.getString(2) + "3> " + rs.getString(3) + "4> " + rs.getString(4) + "5> " + rs.getString(5));
                URL url = new URL(imgUrlS);
                BufferedImage image = ImageIO.read(url);
                if (image.getHeight() < 50 && image.getWidth() < 50) {
                    dm.addElement(new ImgInformation(new ImageIcon("warning.png"), bookTitle + "     " + bookAuthor + "     " + yearOfPublication));
                } else {
                    dm.addElement(new ImgInformation(new ImageIcon(image), bookTitle + "     " + bookAuthor + "     " + yearOfPublication));
                }

                bookImageList.setCellRenderer(new ImgRenderer());
                bookImageList.setModel(dm);
            }
        } catch (SQLException ex) {
            Logger.getLogger(uyelikDevamPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(anaSayfa.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(anaSayfa.class.getName()).log(Level.SEVERE, null, ex);
        }
        sayac = 10;
        sayfaItem = 10;
        if (sayac % sayfaItem == 0) {
            toplamSayfa = sayac / sayfaItem;
        } else {
            toplamSayfa = sayac / sayfaItem + 1;
        }
        lbgoruntulenenSayfa.setText("1");
        lbsayfaOranı.setText("1/" + toplamSayfa);
        countBook();
    }//GEN-LAST:event_enPopulerActionPerformed

    private void anaSayfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anaSayfaActionPerformed
        try {
            anaSayfa ana = new anaSayfa();
            ana.veriCek(1);
        } catch (IOException ex) {
            Logger.getLogger(anaSayfa.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_anaSayfaActionPerformed

    private void sizinIcinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizinIcinActionPerformed
        ArrayList<String> isbn_UserDizi = new ArrayList<String>();
        loginSayfasi login = new loginSayfasi();
        try {
            String isbn_User = "(SELECT user_id FROM bx_book_ratings WHERE isbn IN( SELECT isbn FROM bx_book_ratings WHERE user_id='" + login.anlikKullaniciIsbn + "' AND book_rating>7) ORDER BY book_rating DESC) LIMIT 5"; //   Bu kullanıcının 7 den büyük isbn lere ait kullanıcılar seçildi.
            //System.out.println("isbn_User sorgu : " + isbn_User);
            st = con.createStatement();
            rs = st.executeQuery(isbn_User);

            dm.clear();

            while (rs.next()) {
                isbn_UserDizi.add(rs.getString(1)); //System.out.println("isbn_UserDizi: " +rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(uyelikDevamPage.class.getName()).log(Level.SEVERE, null, ex);
        }

        int d = isbn_UserDizi.size();  //System.out.println("isbn_UserDizi.size(): " +isbn_UserDizi.size());

        try {
            for (int i = 0; i < d; i++) {
                String user_Isbn = "(SELECT * FROM bx_books WHERE isbn IN(SELECT isbn FROM bx_book_ratings WHERE user_id='" + isbn_UserDizi.get(i) + "' AND book_rating>7)) LIMIT 20"; //   Bu kullanıcının 7 den büyük isbn lere ait kullanıcılar seçildi.
                System.out.println("isbn_User sorgu : " + user_Isbn);
                st = con.createStatement();
                rs = st.executeQuery(user_Isbn);

                dm.clear();

                while (rs.next()) {
                    String bookTitle = rs.getString(2);
                    String bookAuthor = rs.getString(3);
                    String yearOfPublication = rs.getString(4);
                    String imgUrlS = rs.getString(6);
                    String imgUrlM = rs.getString(7);
                    System.out.println("2> " + rs.getString(2) + "3> " + rs.getString(3) + "4> " + rs.getString(4) + "5> " + rs.getString(5));
                    URL url = new URL(imgUrlS);
                    BufferedImage image = ImageIO.read(url);
                    if (image.getHeight() < 50 && image.getWidth() < 50) {
                        dm.addElement(new ImgInformation(new ImageIcon("warning.png"), bookTitle + "     " + bookAuthor + "     " + yearOfPublication));
                    } else {
                        dm.addElement(new ImgInformation(new ImageIcon(image), bookTitle + "     " + bookAuthor + "     " + yearOfPublication));
                    }

                    bookImageList.setCellRenderer(new ImgRenderer());
                    bookImageList.setModel(dm);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(uyelikDevamPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(anaSayfa.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(anaSayfa.class.getName()).log(Level.SEVERE, null, ex);
        }

        sayac = 20;
        sayfaItem = 20;
        if (sayac % sayfaItem == 0) {
            toplamSayfa = sayac / sayfaItem;
        } else {
            toplamSayfa = sayac / sayfaItem + 1;
        }
        lbgoruntulenenSayfa.setText("1");
        lbsayfaOranı.setText("1/" + toplamSayfa);
        countBook();
    }//GEN-LAST:event_sizinIcinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(anaSayfa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(anaSayfa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(anaSayfa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(anaSayfa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new anaSayfa().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(anaSayfa.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anaSayfa;
    private javax.swing.JList bookImageList;
    private javax.swing.JButton enIyi;
    private javax.swing.JButton enPopuler;
    private javax.swing.JButton enSonEklenen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbgoruntulenenSayfa;
    private javax.swing.JLabel lbsayfaOranı;
    private javax.swing.JButton oncekiSayfa;
    private javax.swing.JButton sizinIcin;
    private javax.swing.JButton sonrakiSayfa;
    // End of variables declaration//GEN-END:variables
}
